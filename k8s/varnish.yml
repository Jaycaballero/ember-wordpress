apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      name: cache
  template:
    metadata:
      labels:
        name: cache
    spec:
      containers:
      - name: cache
        image: jonbaldie/varnish:latest
        volumeMounts:
        - name: template
          mountPath: /etc/varnish/default.vcl
          subPath: default.vcl
        - name: template
          mountPath: /etc/varnish/secret
          subPath: secret
      volumes:
      - name: template
        configMap:
          name: vcl-template
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vcl-template
data:
  secret: 2bc60cc9-1507-427b-a08a-164367e7f9b0
  default.vcl: |
    vcl 4.0;

    backend default {
        .host = "sx-ember-nginx";
        .port = "80";
    }

    acl purge {
        "localhost";
        "127.0.0.1";
    }

    sub vcl_recv {

        if (req.method == "PRI") {
          /* We do not support SPDY or HTTP/2.0 */
          return (synth(405));
        }

        # Allow purging from ACL
        if (req.method == "PURGE") {
          # If not allowed then a error 405 is returned
          if (!client.ip ~ purge) {
            return(synth(405, "This IP is not allowed to send PURGE requests."));
          }
          # If allowed, do a cache_lookup -> vlc_hit() or vlc_miss()
          return (purge);
        }

        if (req.method != "GET" && req.method != "HEAD") {
            /* We only deal with GET and HEAD by default */
            return (pass);
        }

        if (req.url ~ "\.(css|js|png|gif|jp(e?)g)|swf|ico|svg|woff2") {
          unset req.http.Cookie;
        }


        # WordPress - Did not cache the admin and login pages
        if (req.url ~ "/wp-(login|admin|sxlogin)") {
          return (pass);
        }

        if (req.http.Authorization || req.http.Cookie) {
            /* Not cacheable by default */
          return (pass);
        }


        set req.http.host = "www.systematix.co.uk";
        return (hash);
    }

    sub vcl_backend_fetch {
        return (fetch);
    }

    sub vcl_deliver {
        if (obj.hits > 0) {
                set resp.http.X-Cache = "HIT";
        } else {
                set resp.http.X-Cache = "MISS";
        }

        # Remove some headers: PHP version
        unset resp.http.X-Powered-By;

        # Remove some headers: Apache version & OS
        unset resp.http.Server;

        # Remove some heanders: Varnish
        unset resp.http.Via;
        unset resp.http.X-Varnish;


        return (deliver);
    }


    sub vcl_backend_response {
      # Remove some headers we never want to see
      unset beresp.http.Server;
      unset beresp.http.X-Powered-By;

      # For static content strip all backend cookies
      if (bereq.url ~ "\.(css|js|png|gif|jp(e?)g)|swf|ico") {
        unset beresp.http.cookie;
      }

      # Only allow cookies to be set if we're in admin area
      if (beresp.http.Set-Cookie && bereq.url !~ "^/wp-(login|admin)") {
        unset beresp.http.Set-Cookie;
      }

      # don't cache response to posted requests or those with basic auth
      if ( bereq.method == "POST" || bereq.http.Authorization ) {
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return (deliver);
      }

      # don't cache search results
      if ( bereq.url ~ "\?s=" ){
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return (deliver);
      }

      # only cache status ok
      if ( beresp.status != 200 ) {
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return (deliver);
      }

      # A TTL of 24h
      set beresp.ttl = 24h;
      # Define the default grace period to serve cached content
      set beresp.grace = 30s;

      return (deliver);
    }
---
apiVersion: v1
kind: Service
metadata:
 name: sx-cache
 labels:
   name: sx-cache
spec:
 ports:
   - port: 80
     protocol: TCP
 selector:
   name: cache
 type: NodePort
